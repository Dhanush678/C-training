  cc  -lm   -lpthreads     a.c 

   libm.a    Math library 
   libm.so 
 
   libc.a       C library 
   libc.so 

   libpthreads.a  pthreads library
   libpthreads.so 
------------------------------------------------------------------



Arrays
------
 Homogenius collection of items. 

 int A [10] ; 
  
 Alloxcates   10 * sizeof(int) 
  
   printf("sizeof A is %d",sizeof(A)); 
  
  A[0] ........ A[9]
   A[10] ............  >    ERROR 
  
  A[-1]   ........> execution error 


  char Name[10] ; 

   printf("sizeof Name is %d",sizeof(Name)); 

  short B[10]

   printf("sizeof B is %d",sizeof(B)); 
-----------------------------------------------------------------

 int A [10] ; 

float sal; 

sal = 45364.3465;



  for(int i=0; i<10;i++)
   {
     scanf("%d",& A[i])
   } 
    
  for(int i=0; i<10;i++)
   { 
     printf("%d",  A[i]);
   } 


_____________________________
 
 int A [10] =  {20,30,40,50}; // 10 elements 
                              // remaining 6 elements will be zeros....

 int A [10] =  {20,30,40,50,60,70,80,90,100,110}  ; 
 int B [10] =  {0}  ;        // All 10 elements will be zeros....


// Error 
 A  =  {20,30,40,50,60,70,80,90,100,110}  ; 
 B  =  {0}  ; 

  A  = ................    ERROR 

  B = A;   // ERROR 
  for(int i = 0; i< 10; i++)
      B[i] = A[i]; 

 Better method:  
   memcpy(B,A,sizeof(A));   // Array name behaves like a pointer to first element in the array. 

   B = {0} ; // ERROR 
  memset(B,   0,    sizeof(B)); 
  print B[0] ....B[9]...

   memcpy(B,A,sizeof(A)); 
  print B[0] ....B[9]...

  memset(B,   0,    sizeof(int) * 4  );
  print B[0] ....B[9]...

Rarely Used:
   memset(B,1,  sizeof(B) ) ; 
    B[0] =   0X01010101; 

    B[0]...B[3]...

  check with copying 10,200 to each of the  bytes.

What will be the efect of the following?

 int A [5] =  {20,30,40}  ; 
 int B [10] =  {0}  ; 

  memcpy(A,B,sizeof(B));  //ERROR
  memcpy(B,A,sizeof(A));  

    Rest of elements of B will remain same as they were..
                          
   memcpy(B+1,A,sizeof(A)); 
   memcpy(B+5,A,sizeof(A)); 
------------------------------------------------------------

 int A [10] ; 
 
  for(int i=0; i<10;i++)
   { 
     scanf("%d", A+i)
   } 
   A, A+1, A+2,... 
    
  for(int i=0; i<10;i++)
   { 
     printf("%d", A[i]);
     printf("%d", *(A+i)  );
   } 

----------------------------------------------------------------
RAED 10 INTEGERS TO ARRAY AND DISPLAY IN REVERSE ORDER. 
   
  for(int i=9; i>=0;i--)
   { 
     printf("%d", A[i]);
   } 

  for(int i=0; i<10;i++)
   { 
     printf("%d", A[9-i]);
   } 
----------------------------------------------------------
Add elements of A and B store in C:
  for(int i=0; i<10;i++)
   { 
      C[i]= A[i] + B[i] ;  
   } 
------------------------------------------------------
scalar product of A  : 
  float scalar= 4.5; 

  for(int i=0; i<10;i++)
   { 
       printf("%f", scalar * A[i] );   
   } 

scalar product of vectors:

  for(int res=0, i=0; i<10;i++)
   { 
       res     +=   A[i] * B[i];    
   } 
-------------------------------------------------------------- 
Incomplete array declarations: 

  int A[];     ERROR 

Prototypes:
int function (int A[]); 

With extern key allowed: 
extern int A[]; 

can be completed with initializer list:

int A[]= { 10,20,30} ; 
int A[10]= { 10,20,30} ; // not an incomplete array as count is 10

sizeof(A)/sizeof(int)    ---- Number of elements.
sizeof(A)/sizeof(A[0])   ---- Number of elements.  
                     Better method can be defined as a macro 
---------------------------------------------------------
 C99  - Variable length Arrays:
  Local Arrays and not gloabls:

 
f(int a) 
{
   int i=10; 
   scanf("%d",&i);
    
   int A[a+i]; 
   i = 20; 
} 
----------------------------------------------------------
int i = 10; 
int A[i] ; // Varaible length arrays can't be globals!!
	   // compilation errors 
f(int a )
{
int A[a] = { 10,20,30};  // can't Initialize variable length arrays


} 

Can not jump beyond a Vla in a block, since the definition of a vla involves an expression with varaibles,possibly just modified prior to the definition, and if the definition is by passed by a jump, array will be un allocated.  


Jumping into area above vla definition destroys it, if it was defined previously.

int f(void) { return i +20; }
int main(int argc, char * argv[]) 

 {
int i=10 ;

i=20;
scanf("%d",&j);

goto AFTER;  //ERROR 
int B[j+f()];

AFTER:

return 0;
 } 

------------------------------------------------------------
f()
{
   char A[x]; 
gets(A); 

    x= 
j = 20
  i = j + 2; 
j = 30; 

}
----------------------------------------------------------------
c99 initialization:

 int A [10] =  {20,30,110}  ; 

 int A[10] = {[2]=10,[4]=20,30,40,[8]=80}; 

 int A[10] = {[5]=10,[4]=20,30,40,[8]=80,[0]=1,[5]=40,870}; 

 int A[10] = {[8]=40,870,12 , 34, 56, 78 89 }; 


  int A[10]= { [-1]=30};   // Un-usual that a c compiler checks for array bounds. ERROR
  int A[10]= { [10]=30};   // Un-usual that a c compiler checks for array bounds. ERROR


 int A[] = {[8]=40,870,12 , 34, 56, 78,89 }; 

int i,j,k,l;

i=j=k=l=0;

int A[10]= { [1]=++i,j++,[1]=++k,l++};

What will the values of i and j be?

Point 19 of cstd 6.7.8    says last values for A[1] and A[2] will persist. 
The foot note 130         says ++i and j++ MIGHT not be evaluated as a consequence

---------------------------------------------------
Two dimensional arrays:

  int A[3][4]; 
  A[0]    A[1]    A[2]
   Array   array   array 

|----A[0]---|----A[1]----|---- A[2]-----| 
 array--4    array - 4        array - 4


	sizeof(A[0]) = 4 * size(int) ---16
	sizeof(A[1]) = 4 * size(int) ---16
	sizeof(A[2]) = 4 * size(int) ---16
        sizeof(A)   = 48 

  A[0] [0]
  ........
  A[0] [3] 

  A[1] [0]
  ........
  A[1] [3] 


  A[2] [0]
  ........
  A[2] [3] 

  int A[3][4]=  {  { 10,20,30},       
                        { 5,6,7,8}  ,    
                              {100,200}  } ;


  int A[3][4]=  {  { 0 },          
                       { 5,6,7,8,9,10,12,13}   } ;


  int A[3][4]=  {   5,6,7,8,9,10,12,13,14,15   } ;

  int A[3][4]=  {  { 0 },          
                       { 5,6,7,8,9,10,12,13},
                                        14,15,16   } ;

  int A[3][4]=  {   [1][2]= 5,6,
                        [0][2]=7,8,9,10,12,13,14,15   } ;

 
----------------------------------------------------------

int A[3][4];
for (int i = 0; i < 3; i++)
  for (int j = 0; j < 4; j++)
    {
      printf("Enter A [%d][%d] = ", i,j); 
      scanf ("%d", &A[i][j]);
    }

----------------------------------------------------------


*(A + i) + j;



---------------------------------------------------------
Topics covered
Standard I/O functions, continued from previous day. 
Revised single dimensional arrays for 45 mins. This was found to be required, on checking the responses of participants. 
memset() and memcpy()
C99 Initialization. 
Two and multi-dimensional arrays.
Strings, to be continued tomorrow.

Assigments 
1) Implement matrix addition for 3*4 matrices, with three arrays of two dimensions each.
2) Implement matrix addition for 3*4 matrices, with a single array of three dimensions.
3) Implement matrix multiplication  for a 3*2  AND 2 *4 matrix
4) Define a char array of 10 * 32 size. Print the size of the array. 
   Initialize with multiple strings and display the strings from the array to the screen. 
5) Define a char array of 10 * 32 size.  Read 10 names into the array from the user and display the strings from the array to the screen. How would fgets() and scanf() differ in string input? 


-----------------------------------------------------------
Strings:
  String is a sequence of chars that has null termination.

  char C[4]= { 'a', 'b', 'c','d'} ;   array of chars 

          with %s  ???

  Can't use strcpy, strcmp and strlen on C

  printf("%s\n",C);  // ERROR?? 
   
  char C[4]= { 'a', 'b', 'c','\0'} ;   string 

  char C[4]= { 'a', 'b', 'c'} ;   string 

  char C[4]= { 'a', 'b', 'c', 0 } ;   string 

  char C[10]= { 'a', 'b', 'c'} ;   string 

    sizeof(C) ----   10
    strlen(C) ----   3

    sizeof( "abc") --- 4 

  char CH[20] =  "abcdef"; 

f()
{
char CH1[20] = "hello";
char *cp=      "world";

strcpy(CH1, "abcdefghijkl");
strcpy(cp, "abcd");  //ERROR 

} 

main()
{ char CH2[20]  = " Cprogramming";
  char  CH3[20] = " Cprogramming";

strcpy(CH2, "abcdefghijkl");
 
} 

-----------------------------------------------------

char * cp1  = "hello";
char * cp2  = "hello"; 

// Single literal "hello"  ????
// Problem with following on platforms where 
// Literals are modifiable..

char CH1[20],CH2[20];

strcpy(cp1,"world");  // Allowed on old dos copmilers/OS  

strcpy(CH1, cp1);
strcpy(CH2, cp2);


-----------------------------------------------------

char *cp = "helloworld";
char *cp1 = "world";

    char CH[20]="hello world" ; 
     char c; 
      gets(CH);    ok still gets is dangerous 
     gets( cp);     Error .....
      gets(&c);     techinally may be correct, 
                     pratically useless and dangerous  
       scanf("%s", &c);  techinally may be correct, 
                     pratically useless and dangerous  
       
       scanf("%c", CH); 
       scanf("%c", &c);    ok  
       scanf("%s", CH);    ok still %s without limits  is dangerous 
       scanf("%19s", CH);   
       aENTER
        printf("%s",CH); 
        printf("%c",*CH); 

   char * cp;   char * cp1 = "hello"
    gets( cp); 
    gets( cp1); 
=---------------------------------------------------
    char CH[20]="hello world" ; 
        display each of teh characters of CH array one per line. 
             CH+i 

     CH
     hello world'\0'
------------------------------------------------------------      

     char names[5][20];
     for(int i=0; i<5;i++)
      {
            scanf("%19s",names[i]); 
       } 

       copy second name into the fourth position
       strcpy(names[3], names[1]);  
     char  NAMES[100];

     |--string1---|---string2--|--string3---|
            l1          l2          l3
      NAMES        NAMES+l1+1    NAMES+l1+l2+2  ...............
-----------------------------------------------------------------
ASCII code   CHAR      Alphabet    U/L    digit     blank   
                                    
             A       |    *     |    U                        
                     |          |
                     |          |
             p       |     *    |     L                       
             5       |          |              *
                     |          |
              Space  |          |                        * 

---------------------------------------------------------------

char A[10]= "hello";
char B[15]= "world123";
char C[15]= "world12345abc";


strcpy ( A, B) ;  //Ok,  strlen(A) == 8


strcpy ( A, C) ; // ERROR 


strncpy(A, C, sizeof(A)) ; 
A[    sizeof(A) - 1 ] = '\0'; 

-----------------------------------------------------------------

    char * cp = "abc abc aa ac ad xyz pqr abc pqr xyz abc" ; 

  char * ret_ptr = strchr(cp, 'a'); 

       ret_ptr=   strchr(ret_ptr+1, 'a'); 

       ret_ptr=   strchr(ret_ptr+1, 'a'); 
-----------------------------------------------------

   char * cp = "abc abc aa ac ad xyz pqr abc pqr xyz abc" ; 

    strstr(cp,"abc"); 


      char str1[15], str2[5];

                 strcpy(str1,"helloworld"); 
                 strcpy(str2,"welcometo.........."); 
                 strncpy(str2,"welcometo..........",sizeof(str2)); 
                 str2[ sizeof(str2) -1] = '\0';

----------------------------------------------

----------------------------------------------------


 int * ip ;
 ip + 1 // Next int address
 ip = ip + 1; 
 ip++; 
 ip = ip + 3; 
 ip+=3; 

 A = A + 1; ERROR
 A++        ERROR 
 A+=3       ERROR 
 A=A+5      ERROR 











































    
